<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/+AAD//4AB///AA///+B//////////////////
</value>
  </data>
</root>